name: Build and Deploy

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: false
        default: "main"
  push:
    tags:
      - 'v*'

concurrency:
  group: deploy-production
  cancel-in-progress: true

env:
  FRONTEND_DIR: frontend
  BACKEND_DIR: backend

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && inputs.branch || github.ref }}
          fetch-depth: 1

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      # Use cache when lockfiles exist, avoids the root lockfile error
      - name: Setup Node with pnpm cache
        if: ${{ hashFiles('frontend/pnpm-lock.yaml', 'backend/pnpm-lock.yaml') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: pnpm
          cache-dependency-path: |
            frontend/pnpm-lock.yaml
            backend/pnpm-lock.yaml

      # Fallback when lockfiles are missing for any reason
      - name: Setup Node without cache
        if: ${{ hashFiles('frontend/pnpm-lock.yaml', 'backend/pnpm-lock.yaml') == '' }}
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # No root install, installs are per app
      - name: Build frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          pnpm install --frozen-lockfile
          pnpm run build

      - name: Build backend
        working-directory: ${{ env.BACKEND_DIR }}
        run: |
          pnpm install --frozen-lockfile
          pnpm prisma generate
          pnpm run build

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: Add known_hosts
        run: |
          if [ -z "${{ secrets.SSH_PORT }}" ]; then
            ssh-keyscan "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts
          else
            ssh-keyscan -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_HOST }}" >> ~/.ssh/known_hosts
          fi

      - name: Deploy frontend
        run: |
          set -e
          PORT="${{ secrets.SSH_PORT }}"
          REMOTE="${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}"
          if [ -z "$PORT" ]; then
            SCP_CMD="scp -r"
            SSH_CMD="ssh"
          else
            SCP_CMD="scp -P $PORT -r"
            SSH_CMD="ssh -p $PORT"
          fi
          $SSH_CMD "$REMOTE" "mkdir -p ${{ secrets.FRONTEND_TARGET_DIR }} && rm -rf ${{ secrets.FRONTEND_TARGET_DIR }}/*"
          $SCP_CMD "${{ env.FRONTEND_DIR }}/dist/"* "$REMOTE:${{ secrets.FRONTEND_TARGET_DIR }}/"

      - name: Deploy backend code and prisma
        run: |
          set -e
          PORT="${{ secrets.SSH_PORT }}"
          REMOTE="${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}"
          if [ -z "$PORT" ]; then
            SCP_CMD="scp -r"
            SSH_CMD="ssh"
          else
            SCP_CMD="scp -P $PORT -r"
            SSH_CMD="ssh -p $PORT"
          fi
          $SSH_CMD "$REMOTE" "mkdir -p ${{ secrets.BACKEND_TARGET_DIR }}"
          $SCP_CMD "${{ env.BACKEND_DIR }}/dist" "$REMOTE:${{ secrets.BACKEND_TARGET_DIR }}/"
          $SCP_CMD "${{ env.BACKEND_DIR }}/prisma" "$REMOTE:${{ secrets.BACKEND_TARGET_DIR }}/"
          $SCP_CMD "${{ env.BACKEND_DIR }}/package.json" "$REMOTE:${{ secrets.BACKEND_TARGET_DIR }}/"
          $SCP_CMD "${{ env.BACKEND_DIR }}/pnpm-lock.yaml" "$REMOTE:${{ secrets.BACKEND_TARGET_DIR }}/"

      - name: Install backend deps, migrate, restart service
        run: |
          set -e
          PORT="${{ secrets.SSH_PORT }}"
          REMOTE="${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}"
          if [ -z "$PORT" ]; then
            SSH_CMD="ssh"
          else
            SSH_CMD="ssh -p $PORT"
          fi
          $SSH_CMD "$REMOTE" bash -lc '
            set -e
            cd "${{ secrets.BACKEND_TARGET_DIR }}"
            if ! command -v pnpm >/dev/null 2>&1; then
              if command -v corepack >/dev/null 2>&1; then
                corepack enable
                corepack prepare pnpm@9 --activate
              else
                echo "pnpm not found and corepack not available, please install pnpm on the server"
                exit 1
              fi
            fi
            pnpm install --prod --frozen-lockfile
            pnpm run migrate:deploy
            sudo systemctl restart "${{ secrets.BACKEND_SERVICE_NAME }}"
          '

      - name: Reload Nginx, optional
        run: |
          ssh -p "${{ secrets.SSH_PORT }}" "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" \
            "sudo /usr/sbin/nginx -t && sudo /bin/systemctl reload nginx || true"
